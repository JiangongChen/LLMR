using RoslynCSharp.Compiler;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using RoslynCSharp;
using TMPro;
//using Photon.Pun;
//using Photon.Realtime;
//using System.IO;

public class CompileCompletionExample : MonoBehaviour
{
    // Private
    private string activeCSharpSource = null;
    private ScriptProxy proxy = null;
    private ScriptDomain domain = null;

    // Public
    /// <summary>
    /// The code generated by codex
    /// </summary>
    public GameObject completionText;
    /// <summary>
    /// The run code button.
    /// </summary>
    //public Button runCodeButton;

    // Public
    /// <summary>
    /// The main code editor input field.
    /// </summary>
    InputField runCodeInput;

    public AssemblyReferenceAsset[] assemblyReferences;

    // Methods
    /// <summary>
    /// Called by Unity.
    /// </summary>
    //public void Awake()
    //{
        //runCodeButton.onClick.AddListener(RunCode);
    //}


    public void Start()
    {
        // Create the domain
        domain = ScriptDomain.CreateDomain("CodexCode", true);
                
        // Add assembly references
        foreach (AssemblyReferenceAsset reference in assemblyReferences)
            domain.RoslynCompilerService.ReferenceAssemblies.Add(reference);

        //string[] files = {"Assets/Scripts/Model.cs", "Assets/Scripts/SketchfabLoader.cs"};
        //domain.CompileAndLoadFiles(files);
        //domain.CompileAndLoadFile("Assets/Scripts/SketchfabLoader.cs");
        // Load the template code
        //runCodeInput.text = completionText.text;

    }


    /// <summary>
    /// Main run method.
    /// This causes any modified code to be recompiled and executed.
    /// </summary>
    public void RunCode()
    {
        // Get the C# code from the input field
        string cSharpSource = completionText.GetComponent<TextMeshPro>().text;
        Debug.Log("C# source is "+ cSharpSource);

        // Dont recompile the same code
        if (activeCSharpSource != cSharpSource)
        {
           
            //try
            {
                // Compile code
                ScriptType type = domain.CompileAndLoadMainSource(cSharpSource, ScriptSecurityMode.UseSettings, assemblyReferences);

                // Check for null
                if (type == null)
                {
                    if (domain.RoslynCompilerService.LastCompileResult.Success == false)
                        throw new Exception("Codex code contained errors. Please fix and try again");
                    else if (domain.SecurityResult.IsSecurityVerified == false)
                        throw new Exception("Codex code failed code security verification");
                    else
                        throw new Exception("Codex code does not define a class. You must include one class definition of any name that inherits from 'RoslynCSharp.Example.MazeCrawler'"); // change this
                }

                // Check for base class
                //if (type.IsSubTypeOf<MazeCrawler>() == false)
                //    throw new Exception("Maze crawler code must define a single type that inherits from 'RoslynCSharp.Example.MazeCrawler'");




                // Create an instance
                proxy = type.CreateInstance(gameObject);
                activeCSharpSource = cSharpSource;

               
            }
            //catch (Exception e)
            //{
            //    // Show the code editor window
            //    codeEditorWindow.SetActive(true);
            //    throw e;
            //}
        }
        else
        {
            //Figure this out
        }
    }

}
